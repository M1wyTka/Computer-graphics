const vec3 eye = vec3(0, 0, 3);
const vec3 light = vec3(0, 0, 5);
const int maxsteps = 30;
const float maxdist = 15.0;
const float eps = 0.01;

// Rotation matrix around the X axis.
mat3 rotateX(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
        vec3(1, 0, 0),
        vec3(0, c, -s),
        vec3(0, s, c)
    );
}

// Rotation matrix around the Y axis.
mat3 rotateY(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
        vec3(c, 0, s),
        vec3(0, 1, 0),
        vec3(-s, 0, c)
    );
}

float dPlane(in vec3 p, in vec4 n)
{
    return dot(p, n.xyz) + n.w;
}

float dVibroSphere(vec3 p, in vec3 c, float size, bool side)
{
    if(side)
        return length(p-c) - size + 0.03 * cos(-20.0*p.x + 5.0* iTime);
    else
        return length(p-c) - size + 0.03 * sin(-20.0*p.z + 5.0* iTime);
}

float dSphere(vec3 p, in vec3 c, float size)
{
    return length(p-c) - size;
}

float dEllipsoid( vec3 p, vec3 offset, vec3 r )
{
  p += offset;
  float k0 = length(p/r);
  float k1 = length(p/(r*r));
  return k0*(k0-1.0)/k1;
}

float dVibroTorus ( vec3 p, vec3 offset, vec2 t, bool side)
{
    p -= offset;
	vec2 q = vec2(length(p.xz) - t.x, p.y);
    if(side)
        return length(q) - t.y + 0.03 * sin(20.0*p.x +iTime);
    else
        return length(q) - t.y + 0.03 * sin(20.0*p.z +iTime);
}

float dTorus ( vec3 p, vec3 offset, vec2 t)
{
    p -= offset;
	vec2 q = vec2(length(p.xz) - t.x, p.y);
    
	return length(q) - t.y;
}


float smin ( float a, float b, float k )
{
	float res = exp ( -k*a ) + exp ( -k*b );
	return -log ( res ) / k;
}


float sdf(in vec3 p, in mat3 m)
{
    vec3 q = m * p;
    //return dSphere(p, vec3(0, 0, 0));
    
    float torusEars = smin(dVibroTorus(q, vec3(-1.5, 0, 1),  vec2(1.1, 0.4), true), 
                            dVibroTorus(q, vec3(1.5, 0, 1),  vec2(1.1, 0.4), false), 10.0);
    
    float rightEye = max(dSphere(q, vec3(0.5, -0.7, 0.1), 0.5),-dSphere(q, vec3(0.5, -1.1, 0.2), 0.2));
    float leftEye = max(dSphere(q, vec3(-0.5, -0.7, 0.1), 0.5),-dSphere(q, vec3(-0.5, -1.1, 0.2), 0.2));
    float eyes = smin(leftEye, rightEye, 15.0);
    
    float noseMouth = min(dVibroSphere(q, vec3(0, -1.3, -0.3), 0.2, false),
                            dEllipsoid(q, vec3(0, 1.5, 0.55), vec3(0.3, 0.1, 0.1)));
    float head = max(dSphere(q, vec3(0, 0, -0.8), 1.5), -noseMouth);
    
    		
	head = smin(head, eyes, 30.0);
    head = smin(head, torusEars, 10.0);
    float nimbHead = min(head, dVibroSphere(q, vec3(1.5*sin(iTime), 1.5*cos(iTime), 0.75), 0.3, false));
    float nimbWindowHead = max(nimbHead, -dSphere(q, vec3(sin(iTime), 0, cos(iTime)), 0.5));
    
    float scene = min(nimbWindowHead, dPlane( q, vec4(0, -1, 0, 1))); 
    
    return nimbWindowHead;
    
    }

vec3 generateNormal(vec3 z, float d, in mat3 m)
{
    float e = max(d * 0.5, eps);
    float dx1 = sdf(z + vec3(e, 0, 0), m);
    float dx2 = sdf(z - vec3(e, 0, 0), m);
    float dy1 = sdf(z + vec3(0, e, 0), m);
    float dy2 = sdf(z - vec3(0, e, 0), m);
    float dz1 = sdf(z + vec3(0, 0, e), m);
    float dz2 = sdf(z - vec3(0, 0, e), m);
    return normalize(vec3(dx1-dx2, dy1-dy2, dz1-dz2));
    
}

vec3 trace(in vec3 from, in vec3 dir, out bool hit, in mat3 m)
{
    vec3 p = from;
    float totalDist = 0.0;
    
    hit = false;
    
    for(int stp = 0; stp < maxsteps; stp++)
    {
        float dist = sdf(p, m);
        if(dist < eps)
        {
            hit = true;
            break;
        }
        
        totalDist += dist;
        
        if(totalDist > maxdist)
            break;
            
        p += dist * dir;
    }
    
    return p;
}

const float roughness = 0.5;
const vec3  r0   = vec3 ( 1.0, 0.92, 0.23 );
const vec3  clr  = vec3 ( 0.4, 0.2, 0.7 );
const float gamma = 2.2;
const float pi    = 3.1415926;
const float FDiel = 0.04;		// Fresnel for dielectrics

vec3 fresnel ( in vec3 f0, in float product )
{
	product = clamp ( product, 0.0, 1.0 );		// saturate
	
	return mix ( f0, vec3 (1.0), pow(1.0 - product, 5.0) );
}

float D_blinn(in float roughness, in float NdH)
{
    float m = roughness * roughness;
    float m2 = m * m;
    float n = 2.0 / m2 - 2.0;
    return (n + 2.0) / (2.0 * pi) * pow(NdH, n);
}

float D_beckmann ( in float roughness, in float NdH )
{
	float m    = roughness * roughness;
	float m2   = m * m;
	float NdH2 = NdH * NdH;
	
	return exp( (NdH2 - 1.0) / (m2 * NdH2) ) / (pi * m2 * NdH2 * NdH2);
}

float D_GGX ( in float roughness, in float NdH )
{
	float m  = roughness * roughness;
	float m2 = m * m;
	float NdH2 = NdH * NdH;
	float d  = (m2 - 1.0) * NdH2 + 1.0;
	
	return m2 * NdH / (pi * d * d);
}

float G_schlick ( in float roughness, in float nv, in float nl )
{
    float k = roughness * roughness * 0.5;
    float V = nv * (1.0 - k) + k;
    float L = nl * (1.0 - k) + k;
	
    return 0.25 / (V * L);
}

float G_neumann ( in float nl, in float nv )
{
	return nl * nv / max ( nl, nv );
}

float G_klemen ( in float nl, in float nv, in float vh )
{
	return nl * nv / (vh * vh );
}

float G_default ( in float nl, in float nh, in float nv, in float vh )
{
	return min ( 1.0, min ( 2.0*nh*nv/vh, 2.0*nh*nl/vh ) );
}

vec4 cookTorrance ( in vec3 p, in vec3 n, in vec3 l, in vec3 v )
{
    vec3  h    = normalize ( l + v );
	float nh   = dot (n, h);
	float nv   = dot (n, v);
	float nl   = dot (n, l);
	float vh   = dot (v, h);
    float metallness = 1.0;
    vec3  base  = pow ( clr, vec3 ( gamma ) );
    vec3  F0    = mix ( vec3(FDiel), clr, metallness );
	
			// compute Beckman
   	float d = D_beckmann ( roughness, nh );

            // compute Fresnel
    vec3 f = fresnel ( F0, nv );
	
            // default G
    float g = G_default ( nl, nh, nv, vh );
	
			// resulting color
	vec3  ct   = f*(0.25 * d * g / nv);
	vec3  diff = max(nl, 0.0) * ( vec3 ( 1.0 ) - f ) / pi;
	float ks   = 0.5;

	return vec4 ( pow ( diff * base + ks * ct, vec3 ( 1.0 / gamma ) ), 1.0 );
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    bool hit;
    
    vec3 mouse = vec3((iMouse.xy/iResolution.xy) - 0.5, iMouse.z-0.5);
    mat3 m     = rotateX (6.0 * mouse.y) * rotateY (6.0 * mouse.x);
    
    vec2 scale = 9.0 * iResolution.xy / max(iResolution.x, iResolution.y);
    
    vec2 uv = scale * (fragCoord/iResolution.xy - vec2(0.5));
    vec3 dir = normalize(vec3(uv, 0) - eye);
    //vec4 color = vec4(0, 0, 0, 0);
    
    vec4 color = vec4(1, 0, 0, 0);
    vec2 uvv = fragCoord.xy / iResolution.xy;
	color = texture(iChannel2, uvv);
    //color = vec4(color.xyz, 0);
    
    vec3 p = trace(eye, dir, hit, m);
    
    if(hit)
    {
        vec3  l  = normalize( light - p );
        vec3  v  = normalize( eye - p );
		vec3  n  = generateNormal( p, 0.001, m );
		float nl = max (0.0, dot(n, l));
        vec3  h  = normalize(l + v);
        float hn = max (0.0, dot (h, n));
        float sp = pow (hn, 150.0);
		
		color = cookTorrance ( p, n, l, v );
        color *= texture(iChannel0, p.xy);
        color += 0.1*texture(iChannel3, n);
        
    }
   
     fragColor = color;
}